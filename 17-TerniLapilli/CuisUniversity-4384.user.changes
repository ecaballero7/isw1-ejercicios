

----STARTUP---- (25 October 2020 15:38:43) as /home/edy/MI UNIDAD/CS_DC/IngSoft I/Smalltalk/CuisUniversity-4384.image!


!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 15:42:45'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 15:43:48'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 15:48:36'!
PASSED!
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'ERMC 10/25/2020 17:36:51' prior: 50879630!
test05ShouldMaintainPositionWhenGivenEmptyStringCommand
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: West.
	rover processCommand: ''.
	"self assert: rover position equals: 5@4.
	self assert: rover cardinalPoint class equals: West."
	
	self assert: rover position: 5@4 pointing: West. 
	
	! !
!MarsRoverTest methodsFor: 'nil' stamp: 'ERMC 10/25/2020 17:37:40'!
assert: aMarsRover position: aPosition pointing: aCardinalPoint. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/25/2020 17:38:46' prior: 50880636!
assert: aMarsRover position: aPosition pointing: aCardinalPoint. 

	self assert: aMarsRover position equals: aPosition .
	self assert: aMarsRover cardinalPoint class equals: aCardinalPoint.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/25/2020 17:39:32'!
assert: aMarsRover positionIs: aPosition andIsPointingAt: aCardinalPoint. 

	self assert: aMarsRover position equals: aPosition .
	self assert: aMarsRover cardinalPoint class equals: aCardinalPoint.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/25/2020 17:39:32' prior: 50880624!
test05ShouldMaintainPositionWhenGivenEmptyStringCommand
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: West.
	rover processCommand: ''.
	"self assert: rover position equals: 5@4.
	self assert: rover cardinalPoint class equals: West."
	
	self assert: rover positionIs: 5@4 andIsPointingAt: West. 
	
	! !

!methodRemoval: MarsRoverTest #assert:position:pointing: stamp: 'ERMC 10/25/2020 17:39:32'!
assert: aMarsRover position: aPosition pointing: aCardinalPoint. 

	self assert: aMarsRover position equals: aPosition .
	self assert: aMarsRover cardinalPoint class equals: aCardinalPoint.!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:39:42'!
PASSED!
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'ERMC 10/25/2020 17:40:04' prior: 50880661!
test05ShouldMaintainPositionWhenGivenEmptyStringCommand
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: West.
	rover processCommand: ''.
	
	self assert: rover positionIs: 5@4 andIsPointingAt: West. 
	
	! !
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'ERMC 10/25/2020 17:40:24' prior: 50879641!
test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: North.
	rover processCommand: 'f'.
	
	self assert: rover positionIs: 5@5 andIsPointingAt: North. 

	
	! !

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:40:26'!
PASSED!
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'ERMC 10/25/2020 17:40:42' prior: 50879652!
test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: East.
	rover processCommand: 'f'.
	
	self assert: rover positionIs: 6@4 andIsPointingAt: East. 
	
	! !

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:40:43'!
PASSED!
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'ERMC 10/25/2020 17:40:59' prior: 50879663!
test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: South.
	rover processCommand: 'f'.

	self assert: rover positionIs: 5@3 andIsPointingAt: South . 
	
	! !

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:41:00'!
PASSED!
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'ERMC 10/25/2020 17:41:13' prior: 50879674!
test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: West.
	rover processCommand: 'f'.
	
	self assert: rover positionIs: 4@4 andIsPointingAt: West. 
	
	! !

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:41:15'!
PASSED!
!MarsRoverTest methodsFor: 'move backward tests' stamp: 'ERMC 10/25/2020 17:41:42' prior: 50879586!
test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: North.
	rover processCommand: 'b'.

	self assert: rover positionIs: 5@3 andIsPointingAt: North . 
	
	! !

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:41:45'!
PASSED!
!MarsRoverTest methodsFor: 'move backward tests' stamp: 'ERMC 10/25/2020 17:41:58' prior: 50879597!
test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: East.
	rover processCommand: 'b'.
	
	self assert: rover positionIs: 4@4 andIsPointingAt: East. 

	
	! !

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:42:00'!
PASSED!
!MarsRoverTest methodsFor: 'move backward tests' stamp: 'ERMC 10/25/2020 17:42:16' prior: 50879608!
test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: South.
	rover processCommand: 'b'.

	self assert: rover positionIs: 5@5 andIsPointingAt: South. 

	
	! !
!MarsRoverTest methodsFor: 'move backward tests' stamp: 'ERMC 10/25/2020 17:42:28' prior: 50879619!
test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: West.
	rover processCommand: 'b'.

	self assert: rover positionIs: 6@4 andIsPointingAt: West. 

	
	! !

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:42:29'!
PASSED!
!MarsRoverTest methodsFor: 'move left tests' stamp: 'ERMC 10/25/2020 17:43:37' prior: 50879542!
test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: North.
	rover processCommand: 'l'.
	
	self assert: rover positionIs: 5@4 andIsPointingAt: West. 

	! !

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:43:39'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:43:41'!
PASSED!
!MarsRoverTest methodsFor: 'move left tests' stamp: 'ERMC 10/25/2020 17:44:02' prior: 50879553!
test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: East.
	rover processCommand: 'l'.
	
	self assert: rover positionIs: 5@4 andIsPointingAt: North . 

	! !
!MarsRoverTest methodsFor: 'move left tests' stamp: 'ERMC 10/25/2020 17:44:13' prior: 50879564!
test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: South.
	rover processCommand: 'l'.
	
	self assert: rover positionIs: 5@4 andIsPointingAt: East. 
! !

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:44:14'!
PASSED!
!MarsRoverTest methodsFor: 'move left tests' stamp: 'ERMC 10/25/2020 17:44:26' prior: 50879575!
test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: West.
	rover processCommand: 'l'.

	self assert: rover positionIs: 5@4 andIsPointingAt: South. 

	! !

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:44:28'!
PASSED!
!MarsRoverTest methodsFor: 'multiple commands tests' stamp: 'ERMC 10/25/2020 17:44:52' prior: 50879769!
test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands
	|rover|
	rover _ MarsRover createAt: 0@0 pointingTo: North.
	rover processCommand: 'ffbrl'.

	self assert: rover positionIs: 0@1 andIsPointingAt: North. 
! !
!MarsRoverTest methodsFor: 'multiple commands tests' stamp: 'ERMC 10/25/2020 17:45:11' prior: 50879780!
test23ShouldStopProcessingStringWhenEncountersInvalidCharInString
	|rover|
	rover _ MarsRover createAt: 0@0 pointingTo: North.
	self 
	should: [ 	rover processCommand: 'ffAbrl'. ]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = MarsRover invalidInputErrorDescription . ].
	
	self assert: rover positionIs: 0@2 andIsPointingAt: North. ! !

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:45:12'!
PASSED!
!MarsRoverTest methodsFor: 'move right tests' stamp: 'ERMC 10/25/2020 17:46:23' prior: 50879685!
test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: North.
	rover processCommand: 'r'.

	self assert: rover positionIs: 5@4 andIsPointingAt: East. 

	! !

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:46:25'!
PASSED!
!MarsRoverTest methodsFor: 'move right tests' stamp: 'ERMC 10/25/2020 17:46:40' prior: 50879696!
test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: West.
	rover processCommand: 'r'.

	self assert: rover positionIs: 5@4 andIsPointingAt: North. 
	! !
!MarsRoverTest methodsFor: 'move right tests' stamp: 'ERMC 10/25/2020 17:46:50' prior: 50879707!
test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: East.
	rover processCommand: 'r'.

	self assert: rover positionIs: 5@4 andIsPointingAt: South. ! !
!MarsRoverTest methodsFor: 'move right tests' stamp: 'ERMC 10/25/2020 17:46:57' prior: 50879718!
test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth
	|rover|
	rover _ MarsRover createAt: 5@4 pointingTo: South.
	rover processCommand: 'r'.

	self assert: rover positionIs: 5@4 andIsPointingAt: West. 
	! !

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:46:58'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:51:00'!
PASSED!

!testRun: #MarsRoverTest #test01ShouldReturnInitialPositionWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test02ShouldRaiseErrorWhenPassedNotValidInitialPosition stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test03ShouldReturnInitialCardinalPointWhenCreatedCorrectly stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test04ShouldRaiseErrorWhenPassedNotValidInitialCardinalPoint stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test05ShouldMaintainPositionWhenGivenEmptyStringCommand stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test06ShouldMoveForwardWhenGivenForwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test07ShouldMoveForwardWhenGivenForwardCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test08ShouldMoveForwardWhenGivenForwardCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test09ShouldMoveForwardWhenGivenForwardCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test10ShouldMoveBackwardsWhenGivenBackwardCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test11ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingEast stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test12ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test13ShouldMoveBackwardsWhenGivenBackwardPositionAndIsPointingWest stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test14ShouldPointWestAndKeepPositionWhenGivenLeftCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test15ShouldPointNorthAndKeepPositionWhenGivenLeftCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test16ShouldPointEastAndKeepPositionWhenGivenLeftCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test17ShouldPointSouthAndKeepPositionWhenGivenLeftCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test18ShouldPointEastAndKeepPositionWhenGivenRightCommandAndIsPointingNorth stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test19ShouldPointNorthAndKeepPositionWhenGivenRightCommandAndIsPointingWest stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test20ShouldPointSouthAndKeepPositionWhenGivenRightCommandAndIsPointingEast stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test21ShouldPointWestAndKeepPositionWhenGivenRightCommandAndIsPointingSouth stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test22ShouldChangePositionAndCardinalPointWhenGivenMultipleCommands stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

!testRun: #MarsRoverTest #test23ShouldStopProcessingStringWhenEncountersInvalidCharInString stamp: 'ERMC 10/25/2020 17:51:53'!
PASSED!

----QUIT----(25 October 2020 17:59:16) CuisUniversity-4384.image priorSource: 17554262!

----STARTUP---- (29 October 2020 17:35:05) as /home/edy/MI UNIDAD/CS_DC/IngSoft I/Smalltalk/CuisUniversity-4384.image!


TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli
	'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'ERMC 10/29/2020 17:38:18'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/29/2020 19:04:46'!
Object subclass: #TerniLapili
	instanceVariableNames: 'grid'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'ERMC 10/29/2020 19:04:18'!
test01TheGameStartWithNoOneInTheGrid
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  terniLapili isEmpty ! !
!TerniLapili methodsFor: 'nil' stamp: 'ERMC 10/29/2020 19:05:11'!
isEmpty
	
	^ true.! !

!testRun: #TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/29/2020 19:05:14'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/29/2020 19:32:02'!
test02TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAT: 0@0.
	
	self assert:  terniLapili  isEmpty ! !
!TerniLapili class methodsFor: 'nil' stamp: 'ERMC 10/29/2020 20:57:07'!
create
	^ self new initialize.! !

----QUIT----(29 October 2020 22:33:14) CuisUniversity-4384.image priorSource: 17628431!

----STARTUP---- (31 October 2020 11:45:48) as /home/edy/MI UNIDAD/CS_DC/IngSoft I/Smalltalk/CuisUniversity-4384.image!

!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 11:52:07' overrides: 16896425!
initialize
	
	grid := Collection new.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 11:52:42' prior: 50882565!
test01TheGameStartWithNoOneInTheGrid
	
	|terniLapili |

	terniLapili := TerniLapili create.
	
	self assert:  terniLapili isEmpty ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 12:05:18' prior: 50882603!
test01TheGameStartWithNoOneInTheGrid
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  terniLapili isEmpty ! !

!methodRemoval: TerniLapili class #create stamp: 'ERMC 10/31/2020 12:05:26'!
create
	^ self new initialize.!

Object subclass: #TerniLapili
	instanceVariableNames: 'xTurn xMoves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 13:51:23'!
Object subclass: #TerniLapili
	instanceVariableNames: 'xTurn xMoves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:00:41' prior: 50882598 overrides: 16896425!
initialize
	
	xMoves := OrderedCollection new.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:09:46' prior: 50882611!
test01TheGameStartWithNoOneInTheGrid
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  terniLapili isEmpty ! !

!testRun: #TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 14:09:48'!
PASSED!

!testRun: #TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 14:09:48'!
PASSED!

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:09:48'!
ERROR!

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:09:48'!
ERROR!

xMoves!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:11:25' prior: 50882639!
test01TheGameStartWithNoOneInTheGrid
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  (terniLapili xMoves) isEmpty ! !

!testRun: #TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 14:11:29'!
ERROR!
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 14:11:42'!
xMoves
	self shouldBeImplemented.
	^xMoves! !
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 14:11:49' prior: 50882670!
xMoves

	^xMoves! !

!testRun: #TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 14:11:51'!
PASSED!

!testRun: #TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 14:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 14:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:11:53'!
ERROR!

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:11:53'!
ERROR!

!testRun: #TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 14:11:59'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:20:10' prior: 50882579!
test02TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAT: 0@0.
	
	self assert:  (terniLapili yMoves)  isEmpty.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:20:48' prior: 50882700!
test02TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAT: 0@0.
	
	self assert:  (terniLapili yMoves)  isEmpty.
	self assert: {0@0} equals: terniLapili xMoves.
! !

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:20:50'!
ERROR!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 14:24:17'!
putXAT: aPoint 
	self shouldBeImplemented.! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 14:24:56' prior: 50882721!
putXAT: aPoint 
	
	xMoves  := xMoves add: aPoint .! !

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:24:58'!
ERROR!
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 14:25:04'!
yMoves
	self shouldBeImplemented.! !

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 14:25:25'!
Object subclass: #TerniLapili
	instanceVariableNames: 'xTurn xMoves yMoves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 14:25:21' prior: 50882734!
yMoves
	
	^ yMoves! !

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:25:27'!
ERROR!
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:26:12' prior: 50882634 overrides: 16896425!
initialize
	
	xMoves := OrderedCollection new.
	yMoves := OrderedCollection new. ! !

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:26:13'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:26:30' prior: 50882709!
test02TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAT: 0@0.
	
	self assert:  (terniLapili yMoves)  isEmpty.
	self assert: (0@0) equals: terniLapili xMoves.
! !

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:26:33'!
PASSED!

!testRun: #TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 14:26:33'!
PASSED!

!testRun: #TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 14:26:33'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:36:36'!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAT: 0@0.
	
	self assert:  (terniLapili yMoves)  isEmpty.
	self assert: (0@0) equals: terniLapili xMoves.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:41:02' prior: 50882764!
test02TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAT: 0@0.
	
	self assert: (0@0) equals: terniLapili xMoves.
	self assert:  (terniLapili yMoves)  isEmpty.
! !

Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer xMoves yMoves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 14:41:25'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer xMoves yMoves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:44:06'!
test03shouldRaiseErrorIfPlayer0startsTheGame
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putOAT: 0@0.
	
	self assert:  (terniLapili yMoves)  isEmpty.
	self assert: (0@0) equals: terniLapili xMoves.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:45:44' prior: 50882817!
test03shouldRaiseErrorIfPlayer0startsTheGame
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self 
	should: [ terniLapili putOAt: 0@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = MarsRover notValidCardinalPointErrorDescription. ].
! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 14:46:25'!
putXAt: aPoint 
	
	xMoves  := xMoves add: aPoint .! !

!methodRemoval: TerniLapili #putXAT: stamp: 'ERMC 10/31/2020 14:46:25'!
putXAT: aPoint 
	
	xMoves  := xMoves add: aPoint .!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:46:41' prior: 50882784!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert:  (terniLapili yMoves)  isEmpty.
	self assert: (0@0) equals: terniLapili xMoves.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:46:48' prior: 50882794!
test02TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: (0@0) equals: terniLapili xMoves.
	self assert:  (terniLapili yMoves)  isEmpty.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:47:38' prior: 50882828!
test03shouldRaiseErrorIfPlayer0startsTheGame
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self 
	should: [ terniLapili putOAt: 0@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playerXshouldStartTheGameErrorDescription. ].
! !

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 14:47:46'!
ERROR!

----QUIT----(31 October 2020 14:48:22) CuisUniversity-4384.image priorSource: 17630081!

----STARTUP---- (31 October 2020 14:51:17) as /home/edy/MI UNIDAD/CS_DC/IngSoft I/Smalltalk/CuisUniversity-4384.image!


!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 14:53:43'!
ERROR!
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 14:54:02'!
playerXshouldStartTheGameErrorDescription
	self shouldBeImplemented.! !
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 14:54:51' prior: 50882894!
playerXshouldStartTheGameErrorDescription
	
		^ 'playerX Should play First '.! !

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 14:54:52'!
FAILURE!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 14:55:18'!
FAILURE!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 14:55:18'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 14:56:05'!
putOAt: aPoint 
	
	yMoves add: aPoint.! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 14:56:11' prior: 50882839!
putXAt: aPoint 
	
	xMoves add: aPoint .! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 14:57:56' prior: 50882916!
putOAt: aPoint 
	
	xMoves isEmpty  ifTrue: [^ self error: self class playerXshouldStartTheGameErrorDescription ].
	yMoves add: aPoint.! !

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 14:59:33'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer xPositions yMoves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:59:33' prior: 50882920!
putXAt: aPoint 
	
	xPositions add: aPoint .! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:59:33' prior: 50882675!
xMoves

	^xPositions! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:59:33' prior: 50882754 overrides: 16896425!
initialize
	
	xPositions := OrderedCollection new.
	yMoves := OrderedCollection new. ! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:59:33' prior: 50882924!
putOAt: aPoint 
	
	xPositions isEmpty  ifTrue: [^ self error: self class playerXshouldStartTheGameErrorDescription ].
	yMoves add: aPoint.! !

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 14:59:44'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer xPositions yPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:59:44' prior: 50882956!
putOAt: aPoint 
	
	xPositions isEmpty  ifTrue: [^ self error: self class playerXshouldStartTheGameErrorDescription ].
	yPositions add: aPoint.! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:59:44' prior: 50882746!
yMoves
	
	^ yPositions! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 14:59:44' prior: 50882950 overrides: 16896425!
initialize
	
	xPositions := OrderedCollection new.
	yPositions := OrderedCollection new. ! !

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 15:00:16'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions yPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:16' prior: 50882940!
putXAt: aPoint 
	
	XPositions add: aPoint .! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:16' prior: 50882945!
xMoves

	^XPositions! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:16' prior: 50882985 overrides: 16896425!
initialize
	
	XPositions := OrderedCollection new.
	yPositions := OrderedCollection new. ! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:16' prior: 50882972!
putOAt: aPoint 
	
	XPositions isEmpty  ifTrue: [^ self error: self class playerXshouldStartTheGameErrorDescription ].
	yPositions add: aPoint.! !

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 15:00:24'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:24' prior: 50883015!
putOAt: aPoint 
	
	XPositions isEmpty  ifTrue: [^ self error: self class playerXshouldStartTheGameErrorDescription ].
	OPositions add: aPoint.! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:24' prior: 50882980!
yMoves
	
	^ OPositions! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:24' prior: 50883009 overrides: 16896425!
initialize
	
	XPositions := OrderedCollection new.
	OPositions := OrderedCollection new. ! !
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 15:00:56'!
XPositions

	^XPositions! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:56' prior: 50882848!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert:  (terniLapili yMoves)  isEmpty.
	self assert: (0@0) equals: terniLapili XPositions.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:56' prior: 50882858!
test02TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: (0@0) equals: terniLapili XPositions.
	self assert:  (terniLapili yMoves)  isEmpty.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:00:56' prior: 50882660!
test01TheGameStartWithNoOneInTheGrid
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  (terniLapili XPositions) isEmpty ! !

!methodRemoval: TerniLapili #xMoves stamp: 'ERMC 10/31/2020 15:00:56'!
xMoves

	^XPositions!
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 15:01:07'!
OPositions
	
	^ OPositions! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:01:07' prior: 50883065!
test02TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: (0@0) equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:01:07' prior: 50883055!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert:  (terniLapili OPositions)  isEmpty.
	self assert: (0@0) equals: terniLapili XPositions.
! !

!methodRemoval: TerniLapili #yMoves stamp: 'ERMC 10/31/2020 15:01:08'!
yMoves
	
	^ OPositions!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:01:25'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:03:29'!
test00TheGameStartWithNoOneInTheGrid
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  (terniLapili XPositions) isEmpty ! !

!methodRemoval: TerniLapilliTest #test01TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:03:29'!
test01TheGameStartWithNoOneInTheGrid
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  (terniLapili XPositions) isEmpty !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:03:35'!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: (0@0) equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !

!methodRemoval: TerniLapilliTest #test02TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:03:35'!
test02TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: (0@0) equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:03:42'!
test02PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert:  (terniLapili OPositions)  isEmpty.
	self assert: (0@0) equals: terniLapili XPositions.
! !

!methodRemoval: TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:03:42'!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert:  (terniLapili OPositions)  isEmpty.
	self assert: (0@0) equals: terniLapili XPositions.
!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:04:00'!
FAILURE!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:04:00'!
FAILURE!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:04:05'!
FAILURE!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:04:05'!
FAILURE!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:04:13'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:04:50' prior: 50883133!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: {0@0} equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:04:52'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:06:03' prior: 50883201!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: (OrderedCollection with: (0@0)) equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:06:04'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:06:04'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:06:04'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:06:04'!
FAILURE!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:06:04'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:06:04'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:06:32' prior: 50883215!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: (0@0 asOrderedCollection) equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:06:34'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:06:47' prior: 50883246!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: ((0@0) asOrderedCollection) equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:06:49'!
ERROR!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:06:56'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:07:10' prior: 50883260!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: (#(0@0) asOrderedCollection) equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:07:10'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:08:28' prior: 50883278!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	expectedPosition := OrderedCollection with: (0@0).
	
	self assert: expectedPosition equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:08:30'!
FAILURE!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:08:30'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:09:29' prior: 50883293!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: (0@0).
	expectedPosition := OrderedCollection with: (0@0).
	
	self assert: expectedPosition equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:09:30'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:09:30'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:09:30'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:09:30'!
FAILURE!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:09:30'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:09:30'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:10:03' prior: 50883326!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	expectedPosition := OrderedCollection with: 0@0.
	
	self assert: expectedPosition equals: terniLapili XPositions.
	"self assert:  (terniLapili OPositions)  isEmpty."
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:10:05'!
FAILURE!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:10:05'!
FAILURE!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:10:10'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:10:10'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:10:10'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:10:10'!
FAILURE!

!testRun: #TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:10:10'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:10:10'!
FAILURE!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:10:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:10:51' prior: 50883359!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	expectedPosition := OrderedCollection with: 0@0.
	
	self assert: expectedPosition equals: terniLapili XPositions.
	self assert:  (terniLapili OPositions)  isEmpty.
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:10:55'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:10:58'!
FAILURE!

!testRun: #TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:10:58'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:11:42'!
test02shouldRaiseErrorIfPlayer0startsTheGame
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self 
	should: [ terniLapili putOAt: 0@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playerXshouldStartTheGameErrorDescription. ].
! !

!methodRemoval: TerniLapilliTest #test03shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:11:42'!
test03shouldRaiseErrorIfPlayer0startsTheGame
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self 
	should: [ terniLapili putOAt: 0@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playerXshouldStartTheGameErrorDescription. ].
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:11:47'!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert:  (terniLapili OPositions)  isEmpty.
	self assert: (0@0) equals: terniLapili XPositions.
! !

!methodRemoval: TerniLapilliTest #test02PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:11:47'!
test02PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert:  (terniLapili OPositions)  isEmpty.
	self assert: (0@0) equals: terniLapili XPositions.
!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:11:51'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:12:39' prior: 50883463!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	expectedPosition := OrderedCollection with: 0@0.

	
	self assert:  (terniLapili OPositions)  isEmpty.
	self assert: (0@0) equals: terniLapili XPositions.
! !
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 15:15:17'!
shouldPlayePlayerXErrorDescription
	
		^ 'playerX Should play First '.! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:15:17' prior: 50883031!
putOAt: aPoint 
	
	XPositions isEmpty  ifTrue: [^ self error: self class shouldPlayePlayerXErrorDescription ].
	OPositions add: aPoint.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:15:17' prior: 50883438!
test02shouldRaiseErrorIfPlayer0startsTheGame
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self 
	should: [ terniLapili putOAt: 0@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili shouldPlayePlayerXErrorDescription. ].
! !

!methodRemoval: TerniLapili class #playerXshouldStartTheGameErrorDescription stamp: 'ERMC 10/31/2020 15:15:17'!
playerXshouldStartTheGameErrorDescription
	
		^ 'playerX Should play First '.!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:15:24'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:15:27'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:15:40' prior: 50883487!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	expectedPosition := OrderedCollection with: 0@0.

	
	self assert:  (terniLapili OPositions)  isEmpty.
	self assert: expectedPosition equals: terniLapili XPositions.
! !

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:15:45'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:15:45'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:15:45'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:15:45'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:15:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:18:26' prior: 50883538!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	terniLapili putOAt: 0@1.
	expectedPosition := OrderedCollection with: 0@1.

	
	self assert: expectedPosition equals: terniLapili OPositions.
! !

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:18:28'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:18:28'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:18:28'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:18:28'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:18:28'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:21:14'!
test03PlayerXPlayAfterPlayerO
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	terniLapili putOAt: 0@1.
	terniLapili putXAt:  1@0. 
	
	expectedPosition := OrderedCollection with: 0@1.

	
	self assert: expectedPosition equals: terniLapili OPositions.
! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:22:21' prior: 50883044 overrides: 16896425!
initialize
	
	currentPlayer := #X. 
	XPositions := OrderedCollection new.
	OPositions := OrderedCollection new. ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:25:15' prior: 50883416!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  terniLapili currentPlayer equals: #X 
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:25:23'!
ERROR!
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 15:25:31'!
currentPlayer
	self shouldBeImplemented.
	^currentPlayer! !
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 15:25:35' prior: 50883628!
currentPlayer

	^currentPlayer! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:25:36'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:25:36'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:25:36'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:25:36'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:25:36'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 15:25:36'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 15:25:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:30:46' prior: 50883568!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	 
	terniLapili putOAt: 0@1.
	expectedPosition := OrderedCollection with: 0@1.

	
	self assert: expectedPosition equals: terniLapili OPositions.
! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 15:31:06' prior: 50882999!
putXAt: aPoint 
	
	XPositions add: aPoint .
	currentPlayer := #O. ! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 15:31:26' prior: 50883505!
putOAt: aPoint 
	
	XPositions isEmpty  ifTrue: [^ self error: self class shouldPlayePlayerXErrorDescription ].
	OPositions add: aPoint.
	currentPlayer := #X. ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:32:22' prior: 50883678!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: terniLapili currentPlayer equals: #Invalid literal character ->0. 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:32:28' prior: 50883704!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: terniLapili currentPlayer equals: #O. 
! !

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:32:32'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:32:32'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:32:32'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:32:32'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:32:32'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 15:32:32'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:32:45'!
test04PlayerXPlayAfterPlayerO
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	terniLapili putOAt: 0@1.
	terniLapili putXAt:  1@0. 
	
	expectedPosition := OrderedCollection with: 0@1.

	
	self assert: expectedPosition equals: terniLapili OPositions.
! !

!methodRemoval: TerniLapilliTest #test03PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 15:32:45'!
test03PlayerXPlayAfterPlayerO
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	terniLapili putOAt: 0@1.
	terniLapili putXAt:  1@0. 
	
	expectedPosition := OrderedCollection with: 0@1.

	
	self assert: expectedPosition equals: terniLapili OPositions.
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:33:28' prior: 50883743!
test04PlayerXPlayAfterPlayerO
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 0@1. 
	
	self assert: terniLapili currentPlayer equals: #X.
! !

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 15:33:32'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:33:32'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:33:32'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:33:32'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:33:32'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 15:33:32'!
PASSED!

!methodRemoval: TerniLapilliTest #test00TheGameStartWithNoOneInTheGrid stamp: 'ERMC 10/31/2020 15:33:44'!
test00TheGameStartWithNoOneInTheGrid
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  (terniLapili XPositions) isEmpty !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:35:29'!
test05shouldRaiseErrorIfXplaysAfterX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putXAt: 0@1. 
	
	self assert: terniLapili currentPlayer equals: #X.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:36:08' prior: 50883806!
test05shouldRaiseErrorIfXplaysAfterX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self 
	should: [ terniLapili putXAt: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili shouldPlayPlayerOErrorDescription. ].
! !

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 15:36:14'!
FAILURE!
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 15:36:54'!
shouldPlayPlayerXErrorDescription
	
		^ 'playerX Should play First '.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:36:54' prior: 50883513!
test02shouldRaiseErrorIfPlayer0startsTheGame
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self 
	should: [ terniLapili putOAt: 0@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili shouldPlayPlayerXErrorDescription. ].
! !
!TerniLapili methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:36:54' prior: 50883695!
putOAt: aPoint 
	
	XPositions isEmpty  ifTrue: [^ self error: self class shouldPlayPlayerXErrorDescription ].
	OPositions add: aPoint.
	currentPlayer := #X. ! !

!methodRemoval: TerniLapili class #shouldPlayePlayerXErrorDescription stamp: 'ERMC 10/31/2020 15:36:54'!
shouldPlayePlayerXErrorDescription
	
		^ 'playerX Should play First '.!
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 15:37:10'!
shouldPlayPlayerOErrorDescription
	
		^ 'playerO Should play Now'.! !
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 15:37:16' prior: 50883832!
shouldPlayPlayerXErrorDescription
	
		^ 'playerX Should play Now '.! !
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 15:37:19' prior: 50883869!
shouldPlayPlayerXErrorDescription
	
		^ 'playerX Should play Now'.! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 15:38:24' prior: 50883690!
putXAt: aPoint 
	
	currentPlayer = #O ifTrue: [^ self error: self class shouldPlayPlayerOErrorDescription ].
	XPositions add: aPoint .
	currentPlayer := #O. ! !

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 15:38:28'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:39:36'!
test06shouldRaiseErrorIfOplaysAfterO
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 0@1.
	
	
	self 
	should: [ terniLapili putOAt: 1@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili shouldPlayPlayerOErrorDescription. ].
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 10/31/2020 15:39:43' prior: 50883892!
test06shouldRaiseErrorIfOplaysAfterO
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 0@1.
	
	
	self 
	should: [ terniLapili putOAt: 1@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili shouldPlayPlayerXErrorDescription. ].
! !

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 15:39:47'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 15:40:44' prior: 50883850!
putOAt: aPoint 
	
	currentPlayer = #X ifTrue: [^ self error: self class shouldPlayPlayerXErrorDescription ].
	
	OPositions add: aPoint.
	currentPlayer := #X. ! !

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 15:40:45'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:40:45'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:40:45'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:40:45'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 15:40:45'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 15:40:45'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 15:40:45'!
PASSED!
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 15:48:54'!
test07shouldSavePositionIfPlayerXPutAvalidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	expectedPosition := OrderedCollection with: 0@0. 	
	
	self assert: expectedPosition equals: terniLapili XPositions  ! !

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 15:48:55'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 15:48:55'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 15:48:55'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 15:48:55'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 15:48:55'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 15:48:55'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 15:48:55'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 15:48:55'!
PASSED!
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 15:49:22'!
test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	expectedPosition := OrderedCollection with: 0@0. 	
	
	self assert: expectedPosition equals: terniLapili XPositions  ! !
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 15:49:38' prior: 50883995!
test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@2.
	
	self assert: expectedPosition equals: terniLapili XPositions  ! !
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 15:53:11' prior: 50884007!
test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self 
	should: [ terniLapili putOAt: 0@3.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playersShouldChooseAValidPosition ].! !

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 15:53:19'!
ERROR!
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 15:53:32'!
playersShouldChooseAValidPosition
	self shouldBeImplemented.! !
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 15:54:21' prior: 50884033!
playersShouldChooseAValidPosition
	
	^ 'Players only play in a valid position'! !

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 15:54:22'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 15:58:39' prior: 50883880!
putXAt: aPoint 
	
	currentPlayer = #O ifTrue: [^ self error: self class shouldPlayPlayerOErrorDescription ].
	aPoint isValidPosition ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	
	XPositions add: aPoint .
	currentPlayer := #O. ! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 15:59:28' prior: 50884048!
putXAt: aPoint 
	
	currentPlayer = #O ifTrue: [^ self error: self class shouldPlayPlayerOErrorDescription ].
	(self isValidPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	
	XPositions add: aPoint .
	currentPlayer := #O. ! !
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 16:01:22'!
isValidPosition: aPoint
	
	(aPoint x  > 2 or: aPoint y  > 2) ifTrue: [^ false].
! !
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 16:01:47' prior: 50884070!
isValidPosition: aPoint
	
	(aPoint x  > 2 or: aPoint y  > 2) ifTrue: [^ false].
	(aPoint x  < 0 or: aPoint y  < 0) ifTrue: [^ false].
	^ true! !

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 16:02:15'!
FAILURE!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 16:02:15'!
FAILURE!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 16:02:22'!
FAILURE!
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 16:02:40' prior: 50884017!
test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self 
	should: [ terniLapili putXAt: 0@3.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playersShouldChooseAValidPosition ].! !

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 16:02:41'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 16:02:41'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 16:02:41'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 16:02:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 16:02:41'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 16:02:41'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 16:02:41'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 16:02:41'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 16:02:41'!
PASSED!

!classRemoval: #TerniLapili stamp: 'ERMC 10/31/2020 18:28:24'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLapilliTest stamp: 'ERMC 10/31/2020 18:28:25'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

----End fileIn of /home/edy/Escritorio/IngSoft I/isw1-ejercicios/17-TerniLapilli/TerniLapilli.st----!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:29:01'!
PASSED!
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 18:43:22'!
isPlayingX
	
	^ currentPlayer = #X! !
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 18:43:54'!
isPlayingO
	
	^ self isPlayingX not ! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:44:12'!
PASSED!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 18:44:39' prior: 50884512!
putXAt: aPoint 
	
	self isPlayingO ifTrue: [^ self error: self class shouldPlayPlayerOErrorDescription ].
	(self isValidPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(self isEmptyPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(XPositions size = 3) ifTrue: [^ self error: self class playersCantUseMoreThan3PositionsErrorDescription].
	
	
	XPositions add: aPoint .
	self checkWinner.
	currentPlayer := #O. ! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:44:44'!
PASSED!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 18:45:36' prior: 50884498!
putOAt: aPoint 
	
	self isPlayingX ifTrue: [^ self error: self class shouldPlayPlayerXErrorDescription ].
	
	(self isValidPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(self isEmptyPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].

	OPositions add: aPoint.
	currentPlayer := #X. ! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:45:40'!
PASSED!
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 18:48:47' prior: 50884165!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  self isPlayingX 
! !
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 18:48:54' prior: 50884977!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  terniLapili isPlayingX 
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:48:54'!
PASSED!
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 18:49:21' prior: 50884185!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: terniLapili isPlayingO . 
! !
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 18:49:22' prior: 50885066!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	
	self assert: terniLapili isPlayingO. 
! !

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:49:26'!
PASSED!
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 10/31/2020 18:49:38' prior: 50884193!
test04PlayerXPlayAfterPlayerO
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 0@1. 
	
	self assert: terniLapili isPlayingX 
! !

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:49:39'!
PASSED!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 18:51:07' prior: 50884281!
test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	expectedPosition := Set with: 2@0 with: 2@1 with: 0@1. 	
	
	self assert: expectedPosition equals: terniLapili XPositions.
	self assert: terniLapili isPlayingO ! !

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:51:09'!
PASSED!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 18:51:13' prior: 50885239!
test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	expectedPosition := Set with: 2@0 with: 2@1 with: 0@1. 	
	
	self assert: expectedPosition equals: terniLapili XPositions.
	self assert: terniLapili isPlayingX! !

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:51:14'!
FAILURE!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 18:51:18' prior: 50885333!
test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	expectedPosition := Set with: 2@0 with: 2@1 with: 0@1. 	
	
	self assert: expectedPosition equals: terniLapili XPositions.
	self assert: terniLapili isPlayingO! !

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:51:19'!
PASSED!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 18:54:03'!
test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
! !
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 18:54:45' prior: 50885449!
test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	self 
	should: [terniLapili moveXFrom: 1@2 to: 2@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playersCantMoveAPositionBeforeHaving3PositionsErrorDescription ].
	
! !
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 18:55:48' prior: 50885463!
test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	self 
	should: [terniLapili moveXFrom: 1@2 to: 2@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playersCantMoveAPositionThatIsNotHis ].
	
! !

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 18:55:48'!
ERROR!
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 18:56:02'!
playersCantMoveAPositionThatIsNotHis
	self shouldBeImplemented.! !
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 18:57:00' prior: 50885504!
playersCantMoveAPositionThatIsNotHis
	
	^ ' Players can only move their own positions ' .! !

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 18:57:05'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 18:57:13'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 18:59:09' prior: 50884480!
moveXFrom: aPosition to: aNextPosition

	XPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	
	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(XPositions contents: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].

	XPositions add: aNextPosition.
	XPositions remove: aPosition.
	
	
	currentPlayer := #O. ! !

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 18:59:13'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 18:59:31'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 18:59:31'!
ERROR!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 18:59:31'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 18:59:35'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 18:59:35'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:00:03'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:00:55'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:00:55'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:01:45'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 19:02:04' prior: 50885524!
moveXFrom: aPosition to: aNextPosition

	XPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	
	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(XPositions contents: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].

	XPositions add: aNextPosition.
	XPositions remove: aPosition.
	
	
	currentPlayer := #O. ! !

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:02:04'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:02:44'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:03:38'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:03:56'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:04:57'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:17:33'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:17:59'!
FAILURE!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:17:59'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 19:18:15' prior: 50885655!
moveXFrom: aPosition to: aNextPosition

	XPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	
	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(XPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].

	XPositions add: aNextPosition.
	XPositions remove: aPosition.
	
	
	currentPlayer := #O. ! !

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:18:17'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:18:24'!
PASSED!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 19:23:01'!
test18PlayersCanOnlyMoveToADistance1Position

	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	self 
	should: [terniLapili moveXFrom: 0@0 to: 2@2.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playersCanOnlyMoveToADistance1PositionErrorDescription].
	
! !

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:23:03'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:23:26'!
FAILURE!
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 10/31/2020 19:24:15'!
playersCanOnlyMoveToADistance1PositionErrorDescription

		^ 'Players can only move to a distance 1 position'.! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:24:17'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:24:17'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:24:17'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:24:26'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:24:26'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:24:38'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 19:26:18' prior: 50885711!
moveXFrom: aPosition to: aNextPosition

	XPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	
	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(XPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(self isAdistanceOne: aPosition to: aNextPosition) ifFalse:[^ self error: self class playersCanOnlyMoveToADistance1PositionErrorDescription ].
	
	
	XPositions add: aNextPosition.
	XPositions remove: aPosition.
	
	
	currentPlayer := #O. ! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 19:32:02'!
isAdistanceOne: aPosition to: aNextPosition

	^ ((aPosition x - aNextPosition x) abs <= 1) and: ( (aPosition y - aNextPosition y) abs <= 1)! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:32:14'!
PASSED!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 19:34:33'!
test19shouldSavePositionIfPlayerXIfMakesAValidMove

	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	self 
	should: [terniLapili moveXFrom: 0@0 to: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playersCanOnlyMoveToADistance1PositionErrorDescription].
	
! !

!testRun: #TerniLapilliTest #test19shouldSavePositionIfPlayerXIfMakesAValidMove stamp: 'ERMC 10/31/2020 19:35:03'!
FAILURE!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 19:35:46' prior: 50886052!
test19shouldSavePositionIfPlayerXIfMakesAValidMove

	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	self assert: terniLapili isPlayingX.

	
! !
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 19:36:11' prior: 50886074!
test19shouldSavePositionIfPlayerXIfMakesAValidMove

	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	expectedPosition := Set with: 2@0 with: 2@1 with: 0@1. 	
	
	self assert: terniLapili isPlayingX.

	
! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 19:41:08'!
moveOFrom: aPosition to: aNextPosition

	OPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	
	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(OPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(self isAdistanceOne: aPosition to: aNextPosition) ifFalse:[^ self error: self class playersCanOnlyMoveToADistance1PositionErrorDescription ].
	
	
	OPositions add: aNextPosition.
	OPositions remove: aPosition.
	
	
	currentPlayer := #X. ! !
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 19:45:47'!
test19RulesFromPlayerXApplyToPlayerO

	|terniLapili expectedPositions |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	terniLapili moveOFrom: 1@2 to: 2@2.
	
	expectedPositions := Set with: 2@2 with: 1@1 with: 0@2. 	
	
	self assert: terniLapili isPlayingO.
	self assert: terniLapili OPositions equals: expectedPositions.
	
	

	
! !

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 19:45:48'!
FAILURE!

!methodRemoval: TerniLapilliTest #test19shouldSavePositionIfPlayerXIfMakesAValidMove stamp: 'ERMC 10/31/2020 19:46:27'!
test19shouldSavePositionIfPlayerXIfMakesAValidMove

	|terniLapili expectedPosition |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	expectedPosition := Set with: 2@0 with: 2@1 with: 0@1. 	
	
	self assert: terniLapili isPlayingX.

	
!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 19:46:33'!
FAILURE!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 19:46:33'!
FAILURE!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 19:46:37'!
FAILURE!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 19:46:37'!
FAILURE!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 19:47:02' prior: 50886129!
test19RulesFromPlayerXApplyToPlayerO

	|terniLapili expectedPositions |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	terniLapili moveOFrom: 1@2 to: 2@2.
	
	expectedPositions := Set with: 2@2 with: 1@1 with: 0@2. 	
	
	"self assert: terniLapili isPlayingO."
	self assert: terniLapili OPositions equals: expectedPositions.
	
	

	
! !

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 19:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 19:47:11'!
PASSED!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 10/31/2020 19:49:38' prior: 50886262!
test19RulesFromPlayerXApplyToPlayerO

	|terniLapili expectedPositions |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	terniLapili moveOFrom: 1@2 to: 2@2.
	
	expectedPositions := Set with: 2@2 with: 1@1 with: 0@2. 	
	
	self assert: terniLapili isPlayingX.
	self assert: terniLapili OPositions equals: expectedPositions.
	
	

	
! !

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 19:49:43'!
PASSED!

Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions hasPlayerXWon isOver' "hacer refactor de currentPlayer a nextPlayer"
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 19:50:52'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions hasPlayerXWon isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 19:51:22' prior: 50884437!
currentPlayer

	^currentPlayer
	
	"hacer refactor de currentPlayer a nextPlayer"! !
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 10/31/2020 19:54:55'!
test20PlayerXWinsIfPlayerXMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 19:54:55'!
test13PlayerXWinsIfPlayerXMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 10/31/2020 19:55:04'!
test21PlayerXWinsIfPlayerXMakesVertical1
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 2@1.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 1@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 19:55:04'!
test13PlayerXWinsIfPlayerXMakesVertical1
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 2@1.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 1@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 10/31/2020 19:55:10'!
test22PlayerXWinsIfPlayerXMakesVertical2
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test13PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 19:55:10'!
test13PlayerXWinsIfPlayerXMakesVertical2
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 10/31/2020 20:05:00'!
test23PlayerOWinsIfHeMakesAnyVerticals
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@1.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerOWon. 
! !

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 10/31/2020 20:05:09'!
ERROR!
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 10/31/2020 20:08:20' prior: 50884462!
checkWinner

	 """ver linea vertical """
	| verticalLine0 verticalLine1 verticalLine2 |
	verticalLine0 _ Set with: 0@0 with: 0@1 with: 0@2.
	XPositions = verticalLine0 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].
	
	
	verticalLine1 _ Set with: 1@0 with: 1@1 with: 1@2.
	XPositions = verticalLine1 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].
	
	verticalLine2 _ Set with: 2@0 with: 2@1 with: 2@2.
	XPositions = verticalLine2 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].! !
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 10/31/2020 20:08:42'!
checkWinnerO

	 """ver linea vertical """
	| verticalLine0 verticalLine1 verticalLine2 |
	verticalLine0 _ Set with: 0@0 with: 0@1 with: 0@2.
	OPositions = verticalLine0 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].
	
	
	verticalLine1 _ Set with: 1@0 with: 1@1 with: 1@2.
	XPositions = verticalLine1 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].
	
	verticalLine2 _ Set with: 2@0 with: 2@1 with: 2@2.
	XPositions = verticalLine2 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].! !
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 10/31/2020 20:08:47'!
checkWinnerX

	 """ver linea vertical """
	| verticalLine0 verticalLine1 verticalLine2 |
	verticalLine0 _ Set with: 0@0 with: 0@1 with: 0@2.
	XPositions = verticalLine0 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].
	
	
	verticalLine1 _ Set with: 1@0 with: 1@1 with: 1@2.
	XPositions = verticalLine1 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].
	
	verticalLine2 _ Set with: 2@0 with: 2@1 with: 2@2.
	XPositions = verticalLine2 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].! !

!methodRemoval: TerniLapili #checkWinner stamp: 'ERMC 10/31/2020 20:08:50'!
checkWinner

	 """ver linea vertical """
	| verticalLine0 verticalLine1 verticalLine2 |
	verticalLine0 _ Set with: 0@0 with: 0@1 with: 0@2.
	XPositions = verticalLine0 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].
	
	
	verticalLine1 _ Set with: 1@0 with: 1@1 with: 1@2.
	XPositions = verticalLine1 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].
	
	verticalLine2 _ Set with: 2@0 with: 2@1 with: 2@2.
	XPositions = verticalLine2 ifTrue: [
		isOver _ true.
		hasPlayerXWon _ true.
		].!
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 10/31/2020 20:11:30' prior: 50886530!
checkWinnerO

	 """ver linea vertical """
	| verticalLine0 verticalLine1 verticalLine2 |
	verticalLine0 _ Set with: 0@0 with: 0@1 with: 0@2.
	OPositions = verticalLine0 ifTrue: [
		isOver _ true.
		^true
		].
	
	
	verticalLine1 _ Set with: 1@0 with: 1@1 with: 1@2.
	OPositions = verticalLine1 ifTrue: [
		isOver _ true.
		^true
		].
	
	verticalLine2 _ Set with: 2@0 with: 2@1 with: 2@2.
	OPositions = verticalLine2 ifTrue: [
		isOver _ true.
		^ true.
		].! !
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 10/31/2020 20:13:30' prior: 50886549!
checkWinnerX

	 """ver linea vertical """
	| verticalLine0 verticalLine1 verticalLine2 |
	verticalLine0 _ Set with: 0@0 with: 0@1 with: 0@2.
	XPositions = verticalLine0 ifTrue: [
		isOver _ true.
		^true.
		].
	
	
	verticalLine1 _ Set with: 1@0 with: 1@1 with: 1@2.
	XPositions = verticalLine1 ifTrue: [
		isOver _ true.
		^ true.
		].
	
	verticalLine2 _ Set with: 2@0 with: 2@1 with: 2@2.
	XPositions = verticalLine2 ifTrue: [
		isOver _ true.
		^ true.
		].! !
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 20:13:54' prior: 50884441!
hasPlayerXWon

	^ self checkWinnerX .! !
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 20:14:04'!
hasPlayerOWon

	^ self checkWinnerO .! !

Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 20:14:20'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 20:14:55' prior: 50884452!
isOver

	^ self checkWinnerO  or: self checkWinnerX ! !
!TerniLapili methodsFor: 'accessing' stamp: 'ERMC 10/31/2020 20:15:05' prior: 50886644!
isOver

	^( self checkWinnerO)  or: (self checkWinnerX )! !

Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapili category: 'TerniLapilli' stamp: 'ERMC 10/31/2020 20:15:12'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 10/31/2020 20:15:20'!
ERROR!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 10/31/2020 20:15:28'!
ERROR!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 10/31/2020 20:15:51' prior: 50884731!
putXAt: aPoint 
	
	self isPlayingO ifTrue: [^ self error: self class shouldPlayPlayerOErrorDescription ].
	(self isValidPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(self isEmptyPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(XPositions size = 3) ifTrue: [^ self error: self class playersCantUseMoreThan3PositionsErrorDescription].
	
	
	XPositions add: aPoint .
	self checkWinnerX.
	currentPlayer := #O. ! !

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 10/31/2020 20:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 10/31/2020 20:16:50'!
ERROR!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 10/31/2020 20:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 20:17:02'!
ERROR!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 20:17:02'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 20:17:02'!
ERROR!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 10/31/2020 20:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 20:17:16'!
ERROR!
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 10/31/2020 20:18:28' prior: 50886586!
checkWinnerO

	 """ver linea vertical """
	| verticalLine0 verticalLine1 verticalLine2 |
	verticalLine0 _ Set with: 0@0 with: 0@1 with: 0@2.
	OPositions = verticalLine0 ifTrue: [
		^true
		].
	
	
	verticalLine1 _ Set with: 1@0 with: 1@1 with: 1@2.
	OPositions = verticalLine1 ifTrue: [
		^true
		].
	
	verticalLine2 _ Set with: 2@0 with: 2@1 with: 2@2.
	OPositions = verticalLine2 ifTrue: [
		^ true.
		].
	^false.! !
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 10/31/2020 20:18:39' prior: 50886604!
checkWinnerX

	 """ver linea vertical """
	| verticalLine0 verticalLine1 verticalLine2 |
	verticalLine0 _ Set with: 0@0 with: 0@1 with: 0@2.
	XPositions = verticalLine0 ifTrue: [
		^true.
		].
	
	
	verticalLine1 _ Set with: 1@0 with: 1@1 with: 1@2.
	XPositions = verticalLine1 ifTrue: [
		^ true.
		].
	
	verticalLine2 _ Set with: 2@0 with: 2@1 with: 2@2.
	XPositions = verticalLine2 ifTrue: [
		^ true.
		].
	^false.! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 10/31/2020 20:18:42'!
PASSED!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 10/31/2020 20:19:59'!
test24PlayerXWinsIfPlayerXMakesHorizontal0
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 10/31/2020 20:20:13'!
test20PlayerXWinsIfHeMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test20PlayerXWinsIfPlayerXMakesVertical0 stamp: 'ERMC 10/31/2020 20:20:13'!
test20PlayerXWinsIfPlayerXMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 10/31/2020 20:20:38'!
test21PlayerXWinsIfHeMakesVertical1
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 2@1.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 1@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test21PlayerXWinsIfPlayerXMakesVertical1 stamp: 'ERMC 10/31/2020 20:20:38'!
test21PlayerXWinsIfPlayerXMakesVertical1
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 2@1.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 1@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 10/31/2020 20:20:50'!
test22PlayerXWinsIfHeMakesVertical2
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test22PlayerXWinsIfPlayerXMakesVertical2 stamp: 'ERMC 10/31/2020 20:20:50'!
test22PlayerXWinsIfPlayerXMakesVertical2
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 10/31/2020 20:21:01'!
test24PlayerXWinsIfHeMakesHorizontal0
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test24PlayerXWinsIfPlayerXMakesHorizontal0 stamp: 'ERMC 10/31/2020 20:21:01'!
test24PlayerXWinsIfPlayerXMakesHorizontal0
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 10/31/2020 20:21:37'!
FAILURE!
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 10/31/2020 20:34:20' prior: 50886808!
checkWinnerX

	|winningPositions vertical0 vertical1 vertical2 horizontal0 horizontal1 horizontal2 |
	vertical0 _ Set with: 0@0 with: 0@1 with: 0@2.
	vertical1 _ Set with: 1@0 with: 1@1 with: 1@2.
	vertical2 _ Set with: 2@0 with: 2@1 with: 2@2.
	
	horizontal0 _ Set with: 0@0 with: 1@0 with: 2@0.
	horizontal1 _ Set with: 0@1 with: 1@1 with: 1@2.
	horizontal2 _ Set with: 0@2 with: 1@2 with: 2@2.
	
	winningPositions _ Set with: vertical0 with: vertical1 with: vertical2 with: horizontal0 with: horizontal1 with: horizontal2.
	
	^ winningPositions includes: XPositions 	

! !
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 10/31/2020 20:34:44' prior: 50886792!
checkWinnerO

	|winningPositions vertical0 vertical1 vertical2 horizontal0 horizontal1 horizontal2 |
	vertical0 _ Set with: 0@0 with: 0@1 with: 0@2.
	vertical1 _ Set with: 1@0 with: 1@1 with: 1@2.
	vertical2 _ Set with: 2@0 with: 2@1 with: 2@2.
	
	horizontal0 _ Set with: 0@0 with: 1@0 with: 2@0.
	horizontal1 _ Set with: 0@1 with: 1@1 with: 1@2.
	horizontal2 _ Set with: 0@2 with: 1@2 with: 2@2.
	
	winningPositions _ Set with: vertical0 with: vertical1 with: vertical2 with: horizontal0 with: horizontal1 with: horizontal2.
	
	^ winningPositions includes: OPositions 	
! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 10/31/2020 20:34:48'!
PASSED!

----QUIT----(31 October 2020 20:38:04) CuisUniversity-4384.image priorSource: 17639444!

----STARTUP---- (1 November 2020 11:37:13) as /home/edy/MI UNIDAD/CS_DC/IngSoft I/Smalltalk/CuisUniversity-4384.image!

!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 11:55:21'!
test25PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 11:55:25'!
FAILURE!
!TerniLapili methodsFor: 'game over' stamp: 'ERMC 11/1/2020 11:58:52' prior: 50887030!
checkWinnerX

	|winningPositions vertical0 vertical1 vertical2 horizontal0 horizontal1 horizontal2 diagonal0 diagonal1 |
	vertical0 _ Set with: 0@0 with: 0@1 with: 0@2.
	vertical1 _ Set with: 1@0 with: 1@1 with: 1@2.
	vertical2 _ Set with: 2@0 with: 2@1 with: 2@2.
	
	horizontal0 _ Set with: 0@0 with: 1@0 with: 2@0.
	horizontal1 _ Set with: 0@1 with: 1@1 with: 1@2.
	horizontal2 _ Set with: 0@2 with: 1@2 with: 2@2.
	
	diagonal0 _ Set with: 	0@0 with: 1@1 with: 2@2.
	diagonal1 _ Set with: 	0@2 with: 1@1 with: 2@0.
	
	winningPositions _ Set with: vertical0 with: vertical1 with: vertical2 with: horizontal0 with: horizontal1 with: horizontal2.
	winningPositions  add: diagonal0 .
	winningPositions  add: diagonal1 .
	
	
	^ winningPositions includes: XPositions 	

! !

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 11:58:59'!
PASSED!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 12:00:07'!
test26PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 12:00:16'!
test25PlayerXWinsIfHeMakesDiagonal0
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 12:00:16'!
test25PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 12:00:19'!
PASSED!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 12:03:48'!
testxxPlayersCanOnlyMoveInTheirTurn

	|terniLapili expectedPositions |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	

	

	
! !
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 12:05:29' prior: 50887441!
testxxPlayersCanOnlyMoveInTheirTurn

	|terniLapili expectedPositions |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self 
	should: [terniLapili moveXFrom: 0@1 to: 0@0. ]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili playersCanOnlyMoveToADistance1PositionErrorDescription ].

	

	
! !
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 12:06:17' prior: 50887455!
testxxPlayersCanOnlyMoveInTheirTurn

	|terniLapili expectedPositions |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self 
	should: [terniLapili moveXFrom: 0@1 to: 0@0. ]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili shouldPlayPlayerOErrorDescription ].

	

	
! !

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 12:06:24'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 11/1/2020 12:07:54' prior: 50885941!
moveXFrom: aPosition to: aNextPosition

	XPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	self isPlayingO ifTrue: [^ self error: self class shouldPlayPlayerOErrorDescription ].
	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(XPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(self isAdistanceOne: aPosition to: aNextPosition) ifFalse:[^ self error: self class playersCanOnlyMoveToADistance1PositionErrorDescription ].
	
	
	XPositions add: aNextPosition.
	XPositions remove: aPosition.
	
	
	currentPlayer := #O. ! !

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 12:07:56'!
PASSED!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 11/1/2020 12:08:26' prior: 50886103!
moveOFrom: aPosition to: aNextPosition

	OPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	self isPlayingO ifTrue: [^ self error: self class shouldPlayPlayerOErrorDescription ].

	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(OPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(self isAdistanceOne: aPosition to: aNextPosition) ifFalse:[^ self error: self class playersCanOnlyMoveToADistance1PositionErrorDescription ].
	
	
	OPositions add: aNextPosition.
	OPositions remove: aPosition.
	
	
	currentPlayer := #X. ! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 11/1/2020 12:08:34' prior: 50887627!
moveOFrom: aPosition to: aNextPosition

	OPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	self isPlayingX ifTrue: [^ self error: self class shouldPlayPlayerXErrorDescription ].

	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(OPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(self isAdistanceOne: aPosition to: aNextPosition) ifFalse:[^ self error: self class playersCanOnlyMoveToADistance1PositionErrorDescription ].
	
	
	OPositions add: aNextPosition.
	OPositions remove: aPosition.
	
	
	currentPlayer := #X. ! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 11/1/2020 12:13:37' prior: 50884891!
putOAt: aPoint 
	
	self isPlayingX ifTrue: [^ self error: self class shouldPlayPlayerXErrorDescription ].
	(self isValidPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(self isEmptyPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].

	OPositions add: aPoint.
	currentPlayer := #X. ! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 11/1/2020 12:14:00' prior: 50887685!
putOAt: aPoint 
	
	self isPlayingX ifTrue: [^ self error: self class shouldPlayPlayerXErrorDescription ].
	(self isValidPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(self isEmptyPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(OPositions size = 3) ifTrue: [^ self error: self class playersCantUseMoreThan3PositionsErrorDescription].

	OPositions add: aPoint.
	currentPlayer := #X. ! !
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 11/1/2020 12:14:30' prior: 50887699!
putOAt: aPoint 
	
	self isPlayingX ifTrue: [^ self error: self class shouldPlayPlayerXErrorDescription ].
	(self isValidPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(self isEmptyPosition: aPoint) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(OPositions size = 3) ifTrue: [^ self error: self class playersCantUseMoreThan3PositionsErrorDescription].

	OPositions add: aPoint.
	self checkWinnerO.
	currentPlayer := #X. ! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 12:14:41'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 12:14:42'!
PASSED!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 13:30:32'!
testyyPositionIsEmptyAfterAMove

	|terniLapili expectedPositions |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self deny: (terniLapili XPositions includes: (0@0)).
	self deny: (terniLapili OPositions  includes: (0@0))


	

	
! !
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 13:30:39' prior: 50887834!
testyyPositionIsEmptyAfterAMove

	|terniLapili  |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self deny: (terniLapili XPositions includes: (0@0)).
	self deny: (terniLapili OPositions  includes: (0@0))


	

	
! !

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 13:30:43'!
PASSED!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 13:31:23'!
testxxWhenTheGameIsOverNoOneCanMove
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 13:33:40' prior: 50887971!
testxxWhenTheGameIsOverNoOneCanMove
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 2@2.
	terniLapili putOAt: 0@2.
	
	self 
	should: [terniLapili moveXFrom: 0@0 to: 2@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapili theGameIsOverErrorDescription].! !

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 13:33:43'!
ERROR!
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 11/1/2020 13:33:55'!
theGameIsOverErrorDescription
	self shouldBeImplemented.! !
!TerniLapili class methodsFor: 'errors' stamp: 'ERMC 11/1/2020 13:34:14' prior: 50888004!
theGameIsOverErrorDescription
	
	^ 'The Game is Over!!'! !

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 13:34:15'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 11/1/2020 13:35:58' prior: 50887497!
moveXFrom: aPosition to: aNextPosition

	XPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	self isPlayingO ifTrue: [^ self error: self class shouldPlayPlayerOErrorDescription ].
	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(XPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(self isAdistanceOne: aPosition to: aNextPosition) ifFalse:[^ self error: self class playersCanOnlyMoveToADistance1PositionErrorDescription ].
	(self isOver ) ifTrue: [^ self error: self class theGameIsOverErrorDescription ].
	
	
	XPositions add: aNextPosition.
	XPositions remove: aPosition.
	
	
	currentPlayer := #O. ! !

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 13:36:01'!
FAILURE!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 11/1/2020 13:37:13' prior: 50888017!
moveXFrom: aPosition to: aNextPosition

	XPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	(self isOver ) ifTrue: [^ self error: self class theGameIsOverErrorDescription ].
	self isPlayingO ifTrue: [^ self error: self class shouldPlayPlayerOErrorDescription ].
	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(XPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(self isAdistanceOne: aPosition to: aNextPosition) ifFalse:[^ self error: self class playersCanOnlyMoveToADistance1PositionErrorDescription ].
	
	
	XPositions add: aNextPosition.
	XPositions remove: aPosition.
	
	
	currentPlayer := #O. ! !

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 13:37:16'!
PASSED!
!TerniLapili methodsFor: 'moves' stamp: 'ERMC 11/1/2020 13:39:14' prior: 50887656!
moveOFrom: aPosition to: aNextPosition

	OPositions size < 3 ifTrue: 	[^ self error: self class playersCantMoveAPositionBeforeHaving3PositionsErrorDescription].
	(self isOver ) ifTrue: [^ self error: self class theGameIsOverErrorDescription ].
	self isPlayingX ifTrue: [^ self error: self class shouldPlayPlayerXErrorDescription ].
	(self isValidPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAValidPosition ].
	(OPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].
	(self isEmptyPosition: aNextPosition) ifFalse:[^ self error: self class playersShouldChooseAnEmptyPosition].
	(self isAdistanceOne: aPosition to: aNextPosition) ifFalse:[^ self error: self class playersCanOnlyMoveToADistance1PositionErrorDescription ].
	
	
	OPositions add: aNextPosition.
	OPositions remove: aPosition.
	
	
	currentPlayer := #X. ! !

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 13:39:31'!
PASSED!
!TerniLapilliTest methodsFor: 'order of Players' stamp: 'ERMC 11/1/2020 13:42:31'!
test00TheGameStartWithThePlayersWithoutPosition
	
	|terniLapili |

	terniLapili := TerniLapili new.
	
	self assert:  terniLapili XPositions isEmpty .
	self assert: terniLapili OPositions isEmpty.
! !

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 13:42:32'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayer0startsTheGame stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldRaiseErrorIfPlayerXPutAnInvalidPosition stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPutsAnInvalidPosition stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCantMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnotherValidPosition stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 13:42:33'!
PASSED!

Object subclass: #TerniLaPiliPlayingX
	instanceVariableNames: 'game '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLaPiliPlayingX category: 'TerniLapilli' stamp: 'ERMC 11/1/2020 13:45:39'!
Object subclass: #TerniLaPiliPlayingX
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #TerniLaPiliPlayingO
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLaPiliPlayingO category: 'TerniLapilli' stamp: 'ERMC 11/1/2020 13:45:48'!
Object subclass: #TerniLaPiliPlayingO
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLapili stamp: 'ERMC 11/1/2020 22:08:45'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLaPiliPlayingX stamp: 'ERMC 11/1/2020 22:08:46'!
Object subclass: #TerniLaPiliPlayingX
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLaPiliPlayingO stamp: 'ERMC 11/1/2020 22:08:46'!
Object subclass: #TerniLaPiliPlayingO
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLapilliTest stamp: 'ERMC 11/1/2020 22:08:47'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

----End fileIn of /home/edy/Escritorio/IngSoft I/isw1-ejercicios/17-TerniLapilli/TerniLapilli.st----!

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 22:08:59'!
PASSED!

----STARTUP---- (1 November 2020 22:53:08) as /home/edy/MI UNIDAD/CS_DC/IngSoft I/Smalltalk/CuisUniversity-4384.image!


!classRemoval: #TerniLapili stamp: 'ERMC 11/1/2020 22:53:14'!
Object subclass: #TerniLapili
	instanceVariableNames: 'currentPlayer XPositions OPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLapilliTest stamp: 'ERMC 11/1/2020 22:53:15'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

----End fileIn of /home/edy/Escritorio/IngSoft I/isw1-ejercicios/17-TerniLapilli/TerniLapilli.st----!

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 22:53:33'!
PASSED!

!classRenamed: #TerniLapili as: #TerniLapilli stamp: 'ERMC 11/1/2020 22:53:50'!
Smalltalk renameClassNamed: #TerniLapili as: #TerniLapilli!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887228!
test04PlayerXPlayAfterPlayerO
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 0@1. 
	
	self assert: terniLapili isPlayingX 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887430!
test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	self 
	should: [terniLapili moveXFrom: 1@2 to: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantMoveAPositionThatIsNotHis ].
	
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887545!
testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: -1@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !
!TerniLaPiliGameOver methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50888031!
currentPlayer
	^ self error: TerniLapilli theGameIsOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887633!
test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.

	
	self 
	should: [ terniLapili putXAt: 1@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantUseMoreThan3PositionsErrorDescription ].! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887504!
testyyPositionIsEmptyAfterAMove

	|terniLapili  |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self deny: (terniLapili XPositions includes: (0@0)).
	self deny: (terniLapili OPositions  includes: (0@0))


	

	
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887485!
testxxPlayersCanOnlyMoveInTheirTurn

	|terniLapili expectedPositions |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self 
	should: [terniLapili moveXFrom: 0@1 to: 0@0. ]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli shouldPlayPlayerOErrorDescription ].

	

	
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887533!
testxxshouldRaiseErrorIfPlayerXGoesBelowFloor
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 1@-2]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887448!
test18PlayersCanOnlyMoveToADistance1Position

	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	self 
	should: [terniLapili moveXFrom: 0@0 to: 2@2.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCanOnlyMoveToADistance1PositionErrorDescription].
	
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887651!
test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	" TO DO:
	
	hacer un move y despues que el O trate de poner y salte error"
	
	self 
	should: [ terniLapili putXAt: 1@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantUseMoreThan3PositionsErrorDescription ].! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887314!
test24PlayerXWinsIfHeMakesHorizontal0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLaPiliPlayingX methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50888333!
isMovingO
	^self error: TerniLapilli shouldPlayPlayerXErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887201!
test01TheFirstMoveIsForPlayerX
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self assert:  terniLapili isPlayingX 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887353!
test25PlayerXWinsIfHeMakesDiagonal0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887301!
test23PlayerOWinsIfHeMakesAnyVerticals
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@1.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerOWon. 
! !
!TerniLaPiliPlayingO methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50888250!
isMovingO
	^self error: TerniLapilli  playersCantMoveAPositionBeforeHaving3PositionsErrorDescription! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887366!
test26PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887262!
test20PlayerXWinsIfHeMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887288!
test22PlayerXWinsIfHeMakesVertical2
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887618!
test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 1@1.

	
	self 
	should: [ terniLapili putOAt: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAnEmptyPosition ].! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887220!
test03PlayerOPlayAfterPlayerX
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	
	self assert: terniLapili isPlayingO. 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887192!
test00TheGameStartWithThePlayersWithoutPosition
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self assert:  terniLapili XPositions isEmpty .
	self assert: terniLapili OPositions isEmpty.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887411!
test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	expectedPosition := Set with: 2@0 with: 2@1 with: 0@1. 	
	
	self assert: expectedPosition equals: terniLapili XPositions.
	self assert: terniLapili isPlayingO! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887379!
testxxWhenTheGameIsOverNoOneCanMove
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 2@2.
	
	
	self 
	should: [terniLapili putOAt: 0@2.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli theGameIsOverErrorDescription].! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887237!
test05shouldRaiseErrorIfXplaysAfterX
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	
	self 
	should: [ terniLapili putXAt: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli shouldPlayPlayerOErrorDescription. ].
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:50' prior: 50887208!
test02shouldRaiseErrorIfPlayerOstartsTheGame
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putOAt: 0@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli shouldPlayPlayerXErrorDescription. ].
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887557!
testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 3@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887520!
testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	terniLapili putXAt: 0@1.

	
	self 
	should: [ terniLapili putOAt: 3@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887249!
test06shouldRaiseErrorIfOplaysAfterO
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 0@1.
	
	
	self 
	should: [ terniLapili putOAt: 1@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli shouldPlayPlayerXErrorDescription. ].
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887275!
test21PlayerXWinsIfHeMakesVertical1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 2@1.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 1@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887604!
test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 0@2.

	
	self 
	should: [ terniLapili putXAt: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAnEmptyPosition ].! !
!TerniLaPiliGameOver methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50888064!
putXAt: aPoint
	^ self error: TerniLapilli theGameIsOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887340!
test24PlayerXWinsIfHeMakesHorizontal2
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 1@2.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLaPiliGameOver methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50888058!
putOAt: aPoint
	^ self error: TerniLapilli theGameIsOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887581!
test07shouldSavePositionIfPlayerXPutAvalidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	expectedPosition := Set with: 0@0. 	
	
	self assert: expectedPosition equals: terniLapili XPositions  ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887592!
test09shouldSavePositionIfPlayerOPutsAValidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	
	expectedPosition := Set with: 1@2. 	
	terniLapili putOAt: 1@2.
	
	
	self assert: expectedPosition equals: terniLapili OPositions  ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887466!
test19RulesFromPlayerXApplyToPlayerO

	|terniLapili expectedPositions |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	terniLapili moveOFrom: 1@2 to: 2@2.
	
	expectedPositions := Set with: 2@2 with: 1@1 with: 0@2. 	
	
	self assert: terniLapili isPlayingX.
	self assert: terniLapili OPositions equals: expectedPositions.
	
	

	
! !
!TerniLaPiliMovingX methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50888177!
isMovingO
	^self error: TerniLapilli shouldPlayPlayerXErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887327!
test24PlayerXWinsIfHeMakesHorizontal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@1.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887569!
testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 1@3]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !
!TerniLaPiliGameOver methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50888025!
checkGameOver
	^ self error: TerniLapilli theGameIsOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:53:51' prior: 50887395!
test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	
		
	self 
	should: [terniLapili moveXFrom: 2@0 to: 2@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantMoveAPositionBeforeHaving3PositionsErrorDescription ].! !

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 22:54:59'!
PASSED!

!classRenamed: #TerniLaPiliPlayingX as: #TerniLapilliPlayingX stamp: 'ERMC 11/1/2020 22:55:14'!
Smalltalk renameClassNamed: #TerniLaPiliPlayingX as: #TerniLapilliPlayingX!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:55:14' prior: 50887919 overrides: 16896425!
initialize
	
	XPositions := Set new.
	OPositions := Set new.
	currentState _ TerniLapilliPlayingX with: self.! !

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 22:55:30'!
PASSED!

!classRenamed: #TerniLaPiliPlayingO as: #TerniLapilliPlayingO stamp: 'ERMC 11/1/2020 22:55:39'!
Smalltalk renameClassNamed: #TerniLaPiliPlayingO as: #TerniLapilliPlayingO!

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 22:55:44'!
PASSED!

!classRenamed: #TerniLaPiliMovingX as: #TerniLapilliMovingX stamp: 'ERMC 11/1/2020 22:55:57'!
Smalltalk renameClassNamed: #TerniLaPiliMovingX as: #TerniLapilliMovingX!

!classRenamed: #TerniLaPiliMovingO as: #TerniLapilliMovingO stamp: 'ERMC 11/1/2020 22:56:07'!
Smalltalk renameClassNamed: #TerniLaPiliMovingO as: #TerniLapilliMovingO!

!classRenamed: #TerniLaPiliGameOver as: #TerniLapilliGameOver stamp: 'ERMC 11/1/2020 22:56:17'!
Smalltalk renameClassNamed: #TerniLaPiliGameOver as: #TerniLapilliGameOver!

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 22:56:32'!
PASSED!

!classRenamed: #TerniLapiliState as: #TerniLapilliState stamp: 'ERMC 11/1/2020 22:56:50'!
Smalltalk renameClassNamed: #TerniLapiliState as: #TerniLapilliState!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:56:50' prior: 50887760!
MovingOMoveOFrom: aPosition to: aNextPosition

	(OPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].	
	OPositions add: aNextPosition.
	OPositions remove: aPosition.
	
	currentState _ TerniLapilliState corresponding: self.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:56:50' prior: 50887796!
MovingXMoveXFrom: aPosition to: aNextPosition
	
	(XPositions includes: aPosition) ifFalse:[^ self error: self class playersCantMoveAPositionThatIsNotHis ].	
	XPositions add: aNextPosition.
	XPositions remove: aPosition.
	
	currentState _ TerniLapilliState corresponding: self.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:56:50' prior: 50887834!
PlayingOPutOAt: aPoint
	
	(OPositions size = 3) ifTrue: [^ self error: self class playersCantUseMoreThan3PositionsErrorDescription].

	OPositions add: aPoint.
	currentState _ TerniLapilliState corresponding: self.
	

! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:56:50' prior: 50887870!
PlayingXPutXAt: aPoint
	
	(XPositions size = 3) ifTrue: [^ self error: self class playersCantUseMoreThan3PositionsErrorDescription].

	XPositions add: aPoint.
	currentState _ TerniLapilliState corresponding: self.

! !

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 22:56:59'!
PASSED!
!TerniLapilliState methodsFor: 'nil' stamp: 'ERMC 11/1/2020 22:57:38'!
checkGameOver
	self subclassResponsibility .! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:57:52'!
currentPlayer
	self subclassResponsibility .! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:58:37'!
putOAt: aPoint
	self subclassResponsibility .! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:58:47'!
putXAt: aPoint
	self subclassResponsibility .! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:59:01'!
moveXFrom: aPosition to: aNextPosition.
	self subclassResponsibility .! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:59:06'!
moveOFrom: aPosition to: aNextPosition.
	self subclassResponsibility .! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 22:59:38'!
isOver
	self subclassResponsibility .! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'ERMC 11/1/2020 23:00:12' prior: 50889787!
currentPlayer
	self subclassResponsibility .! !

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 23:00:42'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!

!testRun: #TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 23:00:43'!
PASSED!
!TerniLapilliTest methodsFor: 'positions tests' stamp: 'ERMC 11/1/2020 23:05:14'!
test08shouldSavePositionIfPlayerOPutsAValidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	
	expectedPosition := Set with: 1@2. 	
	terniLapili putOAt: 1@2.
	
	
	self assert: expectedPosition equals: terniLapili OPositions  ! !

!methodRemoval: TerniLapilliTest #test09shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 23:05:14'!
test09shouldSavePositionIfPlayerOPutsAValidPosition
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	
	expectedPosition := Set with: 1@2. 	
	terniLapili putOAt: 1@2.
	
	
	self assert: expectedPosition equals: terniLapili OPositions  !
!TerniLapilliTest methodsFor: 'positions tests' stamp: 'ERMC 11/1/2020 23:05:31'!
test09shouldRaiseErrorIfPlayerXPlaysOccupiedPosition
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 0@2.

	
	self 
	should: [ terniLapili putXAt: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAnEmptyPosition ].! !

!methodRemoval: TerniLapilliTest #test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:05:31'!
test11shouldRaiseErrorIfPlayerXPlaysOccupiedPosition
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 0@2.

	
	self 
	should: [ terniLapili putXAt: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAnEmptyPosition ].!
!TerniLapilliTest methodsFor: 'positions tests' stamp: 'ERMC 11/1/2020 23:05:38'!
test10shouldRaiseErrorIfPlayerOPlaysOccupiedPosition
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 1@1.

	
	self 
	should: [ terniLapili putOAt: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAnEmptyPosition ].! !

!methodRemoval: TerniLapilliTest #test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:05:38'!
test12shouldRaiseErrorIfPlayerOPlaysOccupiedPosition
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 1@1.

	
	self 
	should: [ terniLapili putOAt: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAnEmptyPosition ].!
!TerniLapilliTest methodsFor: 'positions tests' stamp: 'ERMC 11/1/2020 23:05:45'!
test11ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.

	
	self 
	should: [ terniLapili putXAt: 1@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantUseMoreThan3PositionsErrorDescription ].! !

!methodRemoval: TerniLapilliTest #test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:05:45'!
test13ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.

	
	self 
	should: [ terniLapili putXAt: 1@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantUseMoreThan3PositionsErrorDescription ].!
!TerniLapilliTest methodsFor: 'positions tests' stamp: 'ERMC 11/1/2020 23:05:50'!
test12ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	" TO DO:
	
	hacer un move y despues que el O trate de poner y salte error"
	
	self 
	should: [ terniLapili putXAt: 1@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantUseMoreThan3PositionsErrorDescription ].! !

!methodRemoval: TerniLapilliTest #test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:05:50'!
test14ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	" TO DO:
	
	hacer un move y despues que el O trate de poner y salte error"
	
	self 
	should: [ terniLapili putXAt: 1@0.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantUseMoreThan3PositionsErrorDescription ].!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 23:06:25'!
test13shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	
		
	self 
	should: [terniLapili moveXFrom: 2@0 to: 2@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantMoveAPositionBeforeHaving3PositionsErrorDescription ].! !

!methodRemoval: TerniLapilliTest #test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 23:06:25'!
test15shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	
		
	self 
	should: [terniLapili moveXFrom: 2@0 to: 2@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantMoveAPositionBeforeHaving3PositionsErrorDescription ].!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 23:06:31'!
test14PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	expectedPosition := Set with: 2@0 with: 2@1 with: 0@1. 	
	
	self assert: expectedPosition equals: terniLapili XPositions.
	self assert: terniLapili isPlayingO! !

!methodRemoval: TerniLapilliTest #test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 23:06:31'!
test16PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard
	
	|terniLapili expectedPosition |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	expectedPosition := Set with: 2@0 with: 2@1 with: 0@1. 	
	
	self assert: expectedPosition equals: terniLapili XPositions.
	self assert: terniLapili isPlayingO!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 23:06:45'!
test15shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	self 
	should: [terniLapili moveXFrom: 1@2 to: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantMoveAPositionThatIsNotHis ].
	
! !

!methodRemoval: TerniLapilliTest #test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 23:06:45'!
test17shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	self 
	should: [terniLapili moveXFrom: 1@2 to: 0@1.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersCantMoveAPositionThatIsNotHis ].
	
!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 23:06:54'!
test16PlayersCanOnlyMoveInTheirTurn

	|terniLapili expectedPositions |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self 
	should: [terniLapili moveXFrom: 0@1 to: 0@0. ]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli shouldPlayPlayerOErrorDescription ].

	

	
! !

!methodRemoval: TerniLapilliTest #testxxPlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 23:06:54'!
testxxPlayersCanOnlyMoveInTheirTurn

	|terniLapili expectedPositions |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self 
	should: [terniLapili moveXFrom: 0@1 to: 0@0. ]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli shouldPlayPlayerOErrorDescription ].

	

	
!
!TerniLapilliTest methodsFor: 'move positions tests' stamp: 'ERMC 11/1/2020 23:07:01'!
test17PositionIsEmptyAfterAMove

	|terniLapili  |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self deny: (terniLapili XPositions includes: (0@0)).
	self deny: (terniLapili OPositions  includes: (0@0))


	

	
! !

!methodRemoval: TerniLapilliTest #testyyPositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 23:07:01'!
testyyPositionIsEmptyAfterAMove

	|terniLapili  |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	
	terniLapili moveXFrom: 0@0 to: 0@1. 
	
	self deny: (terniLapili XPositions includes: (0@0)).
	self deny: (terniLapili OPositions  includes: (0@0))


	

	
!
!TerniLapilliTest methodsFor: 'board limits tests' stamp: 'ERMC 11/1/2020 23:07:26'!
test20shouldRaiseErrorIfPlayerXGoesBelowFloor
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 1@-2]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !

!methodRemoval: TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 23:07:26'!
testxxshouldRaiseErrorIfPlayerXGoesBelowFloor
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 1@-2]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].!
!TerniLapilliTest methodsFor: 'board limits tests' stamp: 'ERMC 11/1/2020 23:07:32'!
test21shouldRaiseErrorIfPlayerXGoesBeyondLeftWall
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: -1@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !

!methodRemoval: TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 23:07:32'!
testxxshouldRaiseErrorIfPlayerXGoesBeyondLeftWall
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: -1@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].!
!TerniLapilliTest methodsFor: 'board limits tests' stamp: 'ERMC 11/1/2020 23:07:49'!
test22shouldRaiseErrorIfPlayerOGoesBeyondABoardLimit
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	terniLapili putXAt: 0@1.

	
	self 
	should: [ terniLapili putOAt: 3@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !

!methodRemoval: TerniLapilliTest #testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 23:07:49'!
testxxshouldRaiseErrorIfPlayerOGoesBeyondABoardLimit
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	terniLapili putXAt: 0@1.

	
	self 
	should: [ terniLapili putOAt: 3@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].!
!TerniLapilliTest methodsFor: 'board limits tests' stamp: 'ERMC 11/1/2020 23:07:57'!
test23shouldRaiseErrorIfPlayerXGoesBeyondRightWall
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 3@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !

!methodRemoval: TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 23:07:57'!
testxxshouldRaiseErrorIfPlayerXGoesBeyondRightWall
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 3@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].!
!TerniLapilliTest methodsFor: 'board limits tests' stamp: 'ERMC 11/1/2020 23:08:03'!
test24shouldRaiseErrorIfPlayerXGoesBeyondRoof
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 1@3]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !

!methodRemoval: TerniLapilliTest #testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 23:08:03'!
testxxshouldRaiseErrorIfPlayerXGoesBeyondRoof
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 1@3]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].!
!TerniLapilliTest methodsFor: 'board limits tests' stamp: 'ERMC 11/1/2020 23:08:14'!
test24shouldRaiseErrorIfPlayerOGoesBeyondABoardLimit
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	terniLapili putXAt: 0@1.

	
	self 
	should: [ terniLapili putOAt: 3@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !

!methodRemoval: TerniLapilliTest #test22shouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 23:08:14'!
test22shouldRaiseErrorIfPlayerOGoesBeyondABoardLimit
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	terniLapili putXAt: 0@1.

	
	self 
	should: [ terniLapili putOAt: 3@1]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].!
!TerniLapilliTest methodsFor: 'board limits tests' stamp: 'ERMC 11/1/2020 23:08:21'!
test22shouldRaiseErrorIfPlayerXGoesBeyondRoof
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 1@3]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].! !

!methodRemoval: TerniLapilliTest #test24shouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 23:08:21'!
test24shouldRaiseErrorIfPlayerXGoesBeyondRoof
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	self 
	should: [ terniLapili putXAt: 1@3]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli playersShouldChooseAValidPosition ].!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:08:55'!
test25PlayerXWinsIfHeMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test20PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 23:08:55'!
test20PlayerXWinsIfHeMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:00'!
test26PlayerXWinsIfHeMakesVertical1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 2@1.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 1@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test21PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 23:09:00'!
test21PlayerXWinsIfHeMakesVertical1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 2@1.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 1@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:04'!
test27PlayerXWinsIfHeMakesVertical2
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test22PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 23:09:04'!
test22PlayerXWinsIfHeMakesVertical2
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:10'!
test28PlayerOWinsIfHeMakesAnyVerticals
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@1.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerOWon. 
! !

!methodRemoval: TerniLapilliTest #test23PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 23:09:10'!
test23PlayerOWinsIfHeMakesAnyVerticals
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 2@0.
	terniLapili putOAt: 0@0.
	terniLapili putXAt: 2@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@1.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerOWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:15'!
test29PlayerXWinsIfHeMakesHorizontal0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 23:09:15'!
test24PlayerXWinsIfHeMakesHorizontal0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 1@0.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:21'!
test30PlayerXWinsIfHeMakesHorizontal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@1.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 23:09:21'!
test24PlayerXWinsIfHeMakesHorizontal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@1.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:26'!
test31PlayerXWinsIfHeMakesHorizontal2
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 1@2.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test24PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 23:09:26'!
test24PlayerXWinsIfHeMakesHorizontal2
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 1@2.
	terniLapili putOAt: 0@1.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:31'!
test32PlayerXWinsIfHeMakesDiagonal0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 23:09:31'!
test25PlayerXWinsIfHeMakesDiagonal0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 0@2.
	terniLapili putXAt: 2@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:36'!
test33PlayerXWinsIfHeMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test25PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 23:09:36'!
test25PlayerXWinsIfHeMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:40'!
test34PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test26PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 23:09:40'!
test26PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:09:54'!
test25PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test34PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 23:09:54'!
test34PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:10:14'!
test25PlayerXWinsIfHeMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test33PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 23:10:14'!
test33PlayerXWinsIfHeMakesVertical0
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@1.
	terniLapili putXAt: 0@1.
	terniLapili putOAt: 2@0.
	terniLapili putXAt: 0@2.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:10:28'!
test33PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
! !

!methodRemoval: TerniLapilliTest #test25PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 23:10:28'!
test25PlayerXWinsIfHeMakesDiagonal1
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@2.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 2@2.
	terniLapili putXAt: 2@0.

	
	self assert: terniLapili isOver. 
	self assert: terniLapili hasPlayerXWon. 
!
!TerniLapilliTest methodsFor: 'game over tests' stamp: 'ERMC 11/1/2020 23:10:41'!
test34WhenTheGameIsOverNoOneCanMove
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 2@2.
	
	
	self 
	should: [terniLapili putOAt: 0@2.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli theGameIsOverErrorDescription].! !

!methodRemoval: TerniLapilliTest #testxxWhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 23:10:41'!
testxxWhenTheGameIsOverNoOneCanMove
	
	|terniLapili |

	terniLapili := TerniLapilli new.
	
	terniLapili putXAt: 0@0.
	terniLapili putOAt: 1@2.
	terniLapili putXAt: 1@1.
	terniLapili putOAt: 1@0.
	terniLapili putXAt: 2@2.
	
	
	self 
	should: [terniLapili putOAt: 0@2.]
	raise: Error 
	withExceptionDo: [ :anError |
		self assert: anError messageText = TerniLapilli theGameIsOverErrorDescription].!

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test12ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test13shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test17PositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test20shouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test21shouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test22shouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test23shouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test24shouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!

!testRun: #TerniLapilliTest #test34WhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 23:10:43'!
PASSED!
!TerniLapilli methodsFor: 'game over' stamp: 'ERMC 11/1/2020 23:11:37' prior: 50887732!
checkWinner: aPositionCollection

	|winningPositions vertical0 vertical1 vertical2 horizontal0 horizontal1 horizontal2 diagonal0 diagonal1 |
	
	winningPositions := self setWinningPositions. 
	vertical0 _ Set with: 0@0 with: 0@1 with: 0@2.
	vertical1 _ Set with: 1@0 with: 1@1 with: 1@2.
	vertical2 _ Set with: 2@0 with: 2@1 with: 2@2.
	
	horizontal0 _ Set with: 0@0 with: 1@0 with: 2@0.
	horizontal1 _ Set with: 0@1 with: 1@1 with: 2@1.
	horizontal2 _ Set with: 0@2 with: 1@2 with: 2@2.
	
	diagonal0 _ Set with: 	0@0 with: 1@1 with: 2@2.
	diagonal1 _ Set with: 	0@2 with: 1@1 with: 2@0.
	
	winningPositions _ Set with: vertical0 with: vertical1 with: vertical2 with: horizontal0 with: horizontal1 with: horizontal2.
	winningPositions  add: diagonal0 .
	winningPositions  add: diagonal1 .	
	

	^winningPositions includes: aPositionCollection .

! !
!TerniLapilli methodsFor: 'game over' stamp: 'ERMC 11/1/2020 23:12:21'!
setWinningPositions

	|winningPositions vertical0 vertical1 vertical2 horizontal0 horizontal1 horizontal2 diagonal0 diagonal1 |
	
	vertical0 _ Set with: 0@0 with: 0@1 with: 0@2.
	vertical1 _ Set with: 1@0 with: 1@1 with: 1@2.
	vertical2 _ Set with: 2@0 with: 2@1 with: 2@2.
	
	horizontal0 _ Set with: 0@0 with: 1@0 with: 2@0.
	horizontal1 _ Set with: 0@1 with: 1@1 with: 2@1.
	horizontal2 _ Set with: 0@2 with: 1@2 with: 2@2.
	
	diagonal0 _ Set with: 	0@0 with: 1@1 with: 2@2.
	diagonal1 _ Set with: 	0@2 with: 1@1 with: 2@0.
	
	winningPositions _ Set with: vertical0 with: vertical1 with: vertical2 with: horizontal0 with: horizontal1 with: horizontal2.
	winningPositions  add: diagonal0 .
	winningPositions  add: diagonal1 .	
	
	^ winningPositions. 
! !
!TerniLapilli methodsFor: 'game over' stamp: 'ERMC 11/1/2020 23:12:38' prior: 50890954!
checkWinner: aPositionCollection

	|winningPositions |
	
	winningPositions := self setWinningPositions. 

	^winningPositions includes: aPositionCollection .

! !

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test12ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test13shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test17PositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test20shouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test21shouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test22shouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test23shouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test24shouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test34WhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 23:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test00TheGameStartWithThePlayersWithoutPosition stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test01TheFirstMoveIsForPlayerX stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test02shouldRaiseErrorIfPlayerOstartsTheGame stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPlayAfterPlayerX stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXPlayAfterPlayerO stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test05shouldRaiseErrorIfXplaysAfterX stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test06shouldRaiseErrorIfOplaysAfterO stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test07shouldSavePositionIfPlayerXPutAvalidPosition stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test08shouldSavePositionIfPlayerOPutsAValidPosition stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test09shouldRaiseErrorIfPlayerXPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test10shouldRaiseErrorIfPlayerOPlaysOccupiedPosition stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldRaiseErrorIfPlayerXTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test12ShouldRaiseErrorIfPlayerOTriesToUseMoreThan3Positions stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test13shouldRaiseErrorIfAPlayerXTriesToMoveAPositionBeforeHaving3Positions stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCanOnlyMoveAPositionToAnEmptyPositionAndInsideTheBoard stamp: 'ERMC 11/1/2020 23:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test15shouldRaiseErrorIfPlayerXTriesToMoveAPositionThatIsNotHis stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayersCanOnlyMoveInTheirTurn stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test17PositionIsEmptyAfterAMove stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayersCanOnlyMoveToADistance1Position stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test19RulesFromPlayerXApplyToPlayerO stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test20shouldRaiseErrorIfPlayerXGoesBelowFloor stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test21shouldRaiseErrorIfPlayerXGoesBeyondLeftWall stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test22shouldRaiseErrorIfPlayerXGoesBeyondRoof stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test23shouldRaiseErrorIfPlayerXGoesBeyondRightWall stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test24shouldRaiseErrorIfPlayerOGoesBeyondABoardLimit stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXWinsIfHeMakesVertical0 stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXWinsIfHeMakesVertical1 stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXWinsIfHeMakesVertical2 stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOWinsIfHeMakesAnyVerticals stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXWinsIfHeMakesHorizontal0 stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerXWinsIfHeMakesHorizontal1 stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXWinsIfHeMakesHorizontal2 stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerXWinsIfHeMakesDiagonal0 stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXWinsIfHeMakesDiagonal1 stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test34WhenTheGameIsOverNoOneCanMove stamp: 'ERMC 11/1/2020 23:12:45'!
PASSED!